3章　Rのオブジェクト

アトミックベクトル
単純なデータのベクトル。
アトミックベクトルはCを使っていくつかのデータをグループにまとめて作る
die <- c(1,2,3,4,5,6)

個々のアトミックベクトルは1次元として値を格納する。
そしてアトミックベクトルは1つの同じ型のデータしか格納できない。
Rで異なる型のデータを保存するには、異なる型のアトミックベクトルを使う。
Rはdouble、integer、character、logical、complex、rawの全部で6種類の基本データ型を認識する。

typeofを使えばオブジェクトが何型なのかわかる。
> die <- c(1,2,3,4,5,6)
> typeof(die)
[1] "double"

Rでは数値の後ろに大文字のLを続けると整数を作ることができる。
RではLをつけなれば数値は整数として保存されない、Lのついていない整数は倍精度浮動小数点数として保存される。

Rにおける論理値、TRUEとFALSEを格納する

複素数ベクトルは、複素数を格納。
複素数ベクトルを作るには、数値にiを付けた虚数項を追加する。
> comp <- c(1+1i,1+2i,1+3i)
> comp
[1] 1+1i 1+2i 1+3i
> typeof(comp)
[1] "complex"

rawベクトルは、手が加えられていないデータバイトを格納する。
rawベクトルの作り方はかなり複雑だが、長さnの空のrawベクトルはraw(n）で作る
> raw(3)
[1] 00 00 00
> typeof(raw(3))
[1] "raw"

属性
属性とはアトミックベクトルに追加できる情報のこと。
属性は「メタデータ」のようなもの。
Rは通常このメタデータを無視するが、一部のR関数は特定の属性をチェックする。
attributesでオブジェクトがどのような属性を持っているかわかる。
オブジェクトが属性を持たなければ、attributesはNULLを返す。
dieのようなアトミックベクトルはユーザーが属性を指定しない限り、勝手に属性を持つことはない。
> die <- c(1,2,3,4,5,6)
> attributes(die)
NULL

アトミックベクトルに与えらる属性でもっとも一般的なものは名前、次元(dim)、クラス。
これらの属性はどれもオブジェクトに属性を与えるための専用ヘルパー関数を持っている。
ヘルパー関数を使えば、すでに属性も持っているオブジェクトの属性値をルックアップ（参照）できる。

名前のヘルパー関数はnames
> names(die) <- c("one", "two", "three", "four", "five", "six")
> names(die)
[1] "one"   "two"   "three" "four"  "five"  "six"  

dimで次元属性を与えれば、アトミックベクトルをn次元配列に変換できる。
> dim(die) <- c(2,3)
> die
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

Rは常にdimで渡された最初の値を行数、第二の値を列数として使う

行列は線形代数の行列を同じように2次元配列を格納します。
行列を作るにはmatrix関数に行列を再構成するアトミックベクトルをわたし、さらにnrow関数に数値を渡して行列の行数を定義する。
するとmatrixは指定された行数の行列になるようにベクトルを再構成する。
nrowではなくncolを指定すると行列の列数を指定できる。

> m <- matrix(die, nrow=2)
> m
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

matrixはデフォルトでは列ごとに値を並べていますが、byrow = TRUE 引数を指定すると行ごとに値を並べることができる。
> m <- matrix(die, nrow=2, byrow=TRUE)
> m
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

array関数は、n次元配列を作ります。
基本的にdim属性を設定するのと同じことしかしません。
> ar <- array(c(11:14,21:24,31:34), dim=c(2,2,3))
> ar
, , 1

     [,1] [,2]
[1,]   11   13
[2,]   12   14

, , 2

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 3

     [,1] [,2]
[1,]   31   33
[2,]   32   34

クラス
オブジェクトの次元を変えてもオブジェクトの型は変わりませんが、オブジェクトのclass属性は変わります。
クラスはアトミックベクトルの特殊形です。
オブジェクトのclass属性はattributesを実行してもかならずしも実行されません。
classを使ってピンポイントでclass属性をチェックする必要があります。

リスト
リストはデータを1次元のグループにデータをまとめるという点でアトミックベクトルに似ている。
しかしリストは個々の値をグループにまとめてるわけはありません。
アトミックベクトルやほかのリストなどのRオブジェクトをグループにするのです。
> list1 <- list(100:130,"R",list(TRUE,FALSE))
> list1
[[1]]
 [1] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128
[30] 129 130

[[2]]
[1] "R"

[[3]]
[[3]][[1]]
[1] TRUE

[[3]][[2]]
[1] FALSE

データフレーム
データフレームはリストの2次元バージョン。
データフレームはデータ分析のためには群を抜いてもっとも便利なストレージ構造。
データフレームはdata.frameで作れるがしんどいです。
Rにファイルを読み込んでその内容をロードする。

まとめ
Rではデータは5種類のオブジェクトに保存できる。
これらのオブジェクトのうちデータサイエンスでもっともやくに立つのはデータフレームです。
データフレームは表形式データというデータサイエンスでもっともよく使われるデータ形式のひとつとして保存できます。



